from dotenv import load_dotenv
import os
import re
import requests

# Needs to contain GITHUB_TOKEN
load_dotenv()

# GitHub repository details
owner = "ossf"
repo = "scorecard"
url = f"https://api.github.com/repos/{owner}/{repo}/git/trees/main?recursive=1"

# Headers required by GitHub API
headers = {
    "User-Agent": "Python-Directory-Fetcher"
}
github_pat = os.getenv("GITHUB_TOKEN")
if github_pat is not None:
    headers["Authorization"] = f"token {github_pat}"

script_dir = os.path.dirname(os.path.abspath(__file__))
TARGET_PATH = os.path.join(script_dir, "..", "src", "probe_name.rs")

TEMPLATE = """
/// This file is generated by scripts/generate_code.py
/// Please do not modify it directly.

use std::fmt::Display;

use serde::{{Deserialize, Serialize}};

#[derive(Deserialize, Serialize, Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]
#[allow(non_camel_case_types)]
pub(crate) enum ProbeName {{
    {probes}
}}

impl Display for ProbeName {{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {{
        let name = serde_json::to_string(self)
            .unwrap_or_else(|_| String::new())
            .trim_matches('"')
            .to_string();
        write!(f, "{{name}}")
    }}
}}

#[cfg(test)]
mod tests {{
    use super::*;

    #[test]
    fn display_is_as_expected() {{
        assert_eq!(ProbeName::archived.to_string(), "archived");
    }}
}}
"""


def get_probes():
    try:
        # Send a GET request to GitHub API
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # Raise error for HTTP issues
        contents = response.json()
        filepaths = [item['path'] for item in contents['tree']]

        pattern = r"probes/([^/]+)/def\.yml"
        probes = [match.group(1) for filepath in filepaths if (match := re.search(pattern, filepath))]
        
        return probes
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")

probes = get_probes()
with open(TARGET_PATH, 'w') as file:
    file.write(TEMPLATE.format(probes = ",".join(probes)))
