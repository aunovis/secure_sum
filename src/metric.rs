/// This file is generated by scripts/generate_code.py
/// Please do not modify it directly.
use serde::{Deserialize, Serialize};

#[derive(Debug, PartialEq, Deserialize, Serialize)]
#[allow(non_snake_case)]
#[serde(deny_unknown_fields)]
pub(crate) struct Metric {
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) archived: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) blocksDeleteOnBranches: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) blocksForcePushOnBranches: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) branchProtectionAppliesToAdmins: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) branchesAreProtected: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) codeApproved: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) codeReviewOneReviewers: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) contributorsFromOrgOrCompany: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) createdRecently: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) dependencyUpdateToolConfigured: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) dismissesStaleReviews: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) fuzzed: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasBinaryArtifacts: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasDangerousWorkflowScriptInjection: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasDangerousWorkflowUntrustedCheckout: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasFSFOrOSIApprovedLicense: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasLicenseFile: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasNoGitHubWorkflowPermissionUnknown: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasOSVVulnerabilities: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasOpenSSFBadge: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasPermissiveLicense: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasRecentCommits: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasReleaseSBOM: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasSBOM: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) hasUnverifiedBinaryArtifacts: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) internal: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) issueActivityByProjectMember: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) jobLevelPermissions: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) packagedWithAutomatedWorkflow: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) pinsDependencies: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) releasesAreSigned: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) releasesHaveProvenance: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) releasesHaveVerifiedProvenance: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) requiresApproversForPullRequests: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) requiresCodeOwnersReview: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) requiresLastPushApproval: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) requiresPRsToChangeCode: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) requiresUpToDateBranches: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) runsStatusChecksBeforeMerging: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) sastToolConfigured: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) sastToolRunsOnAllCommits: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) securityPolicyContainsLinks: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) securityPolicyContainsText: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) securityPolicyContainsVulnerabilityDisclosure: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) securityPolicyPresent: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) testsRunInCI: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) topLevelPermissions: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) utils: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) webhooksUseSecrets: Option<f32>,
    #[serde(default, deserialize_with = "zero_to_none")]
    pub(crate) zrunner: Option<f32>,
}

fn zero_to_none<'de, D>(deserializer: D) -> Result<Option<f32>, D::Error>
where
    D: serde::Deserializer<'de>,
{
    let value = Option::<f32>::deserialize(deserializer)?;
    Ok(match value {
        Some(0.0) => None,
        _ => value,
    })
}

#[cfg(test)]
pub(crate) static EXAMPLE_METRIC_STR: &str = r#"
archived = 0.0
blocksDeleteOnBranches = 0.1
blocksForcePushOnBranches = 0.2
branchProtectionAppliesToAdmins = 0.3
branchesAreProtected = 0.4
codeApproved = 0.5
codeReviewOneReviewers = 0.6
contributorsFromOrgOrCompany = 0.7
createdRecently = 0.8
dependencyUpdateToolConfigured = 0.9
dismissesStaleReviews = 1.0
fuzzed = 1.1
hasBinaryArtifacts = 1.2
hasDangerousWorkflowScriptInjection = 1.3
hasDangerousWorkflowUntrustedCheckout = 1.4
hasFSFOrOSIApprovedLicense = 1.5
hasLicenseFile = 1.6
hasNoGitHubWorkflowPermissionUnknown = 1.7
hasOSVVulnerabilities = 1.8
hasOpenSSFBadge = 1.9
hasPermissiveLicense = 2.0
hasRecentCommits = 2.1
hasReleaseSBOM = 2.2
hasSBOM = 2.3
hasUnverifiedBinaryArtifacts = 2.4
internal = 2.5
issueActivityByProjectMember = 2.6
jobLevelPermissions = 2.7
packagedWithAutomatedWorkflow = 2.8
pinsDependencies = 2.9
releasesAreSigned = 3.0
releasesHaveProvenance = 3.1
releasesHaveVerifiedProvenance = 3.2
requiresApproversForPullRequests = 3.3
requiresCodeOwnersReview = 3.4
requiresLastPushApproval = 3.5
requiresPRsToChangeCode = 3.6
requiresUpToDateBranches = 3.7
runsStatusChecksBeforeMerging = 3.8
sastToolConfigured = 3.9
sastToolRunsOnAllCommits = 4.0
securityPolicyContainsLinks = 4.1
securityPolicyContainsText = 4.2
securityPolicyContainsVulnerabilityDisclosure = 4.3
securityPolicyPresent = 4.4
testsRunInCI = 4.5
topLevelPermissions = 4.6
utils = 4.7
webhooksUseSecrets = 4.8
zrunner = 4.9
"#;

#[cfg(test)]
pub(crate) static EXAMPLE_METRIC: Metric = Metric {
    archived: Some(0.0),
    blocksDeleteOnBranches: Some(0.1),
    blocksForcePushOnBranches: Some(0.2),
    branchProtectionAppliesToAdmins: Some(0.3),
    branchesAreProtected: Some(0.4),
    codeApproved: Some(0.5),
    codeReviewOneReviewers: Some(0.6),
    contributorsFromOrgOrCompany: Some(0.7),
    createdRecently: Some(0.8),
    dependencyUpdateToolConfigured: Some(0.9),
    dismissesStaleReviews: Some(1.0),
    fuzzed: Some(1.1),
    hasBinaryArtifacts: Some(1.2),
    hasDangerousWorkflowScriptInjection: Some(1.3),
    hasDangerousWorkflowUntrustedCheckout: Some(1.4),
    hasFSFOrOSIApprovedLicense: Some(1.5),
    hasLicenseFile: Some(1.6),
    hasNoGitHubWorkflowPermissionUnknown: Some(1.7),
    hasOSVVulnerabilities: Some(1.8),
    hasOpenSSFBadge: Some(1.9),
    hasPermissiveLicense: Some(2.0),
    hasRecentCommits: Some(2.1),
    hasReleaseSBOM: Some(2.2),
    hasSBOM: Some(2.3),
    hasUnverifiedBinaryArtifacts: Some(2.4),
    internal: Some(2.5),
    issueActivityByProjectMember: Some(2.6),
    jobLevelPermissions: Some(2.7),
    packagedWithAutomatedWorkflow: Some(2.8),
    pinsDependencies: Some(2.9),
    releasesAreSigned: Some(3.0),
    releasesHaveProvenance: Some(3.1),
    releasesHaveVerifiedProvenance: Some(3.2),
    requiresApproversForPullRequests: Some(3.3),
    requiresCodeOwnersReview: Some(3.4),
    requiresLastPushApproval: Some(3.5),
    requiresPRsToChangeCode: Some(3.6),
    requiresUpToDateBranches: Some(3.7),
    runsStatusChecksBeforeMerging: Some(3.8),
    sastToolConfigured: Some(3.9),
    sastToolRunsOnAllCommits: Some(4.0),
    securityPolicyContainsLinks: Some(4.1),
    securityPolicyContainsText: Some(4.2),
    securityPolicyContainsVulnerabilityDisclosure: Some(4.3),
    securityPolicyPresent: Some(4.4),
    testsRunInCI: Some(4.5),
    topLevelPermissions: Some(4.6),
    utils: Some(4.7),
    webhooksUseSecrets: Some(4.8),
    zrunner: Some(4.9),
};
