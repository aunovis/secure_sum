/// This file is generated by scripts/generate_code.py
/// Please do not modify it directly.
use std::fmt::Display;

use serde::{Deserialize, Serialize};

#[derive(Deserialize, Serialize, Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]
#[allow(non_camel_case_types)]
pub(crate) enum ProbeName {
    archived,
    blocksDeleteOnBranches,
    blocksForcePushOnBranches,
    branchProtectionAppliesToAdmins,
    branchesAreProtected,
    codeApproved,
    codeReviewOneReviewers,
    contributorsFromOrgOrCompany,
    createdRecently,
    dependencyUpdateToolConfigured,
    dismissesStaleReviews,
    fuzzed,
    hasBinaryArtifacts,
    hasDangerousWorkflowScriptInjection,
    hasDangerousWorkflowUntrustedCheckout,
    hasFSFOrOSIApprovedLicense,
    hasLicenseFile,
    hasNoGitHubWorkflowPermissionUnknown,
    hasOSVVulnerabilities,
    hasOpenSSFBadge,
    hasPermissiveLicense,
    hasRecentCommits,
    hasReleaseSBOM,
    hasSBOM,
    hasUnverifiedBinaryArtifacts,
    issueActivityByProjectMember,
    jobLevelPermissions,
    packagedWithAutomatedWorkflow,
    pinsDependencies,
    releasesAreSigned,
    releasesHaveProvenance,
    releasesHaveVerifiedProvenance,
    requiresApproversForPullRequests,
    requiresCodeOwnersReview,
    requiresLastPushApproval,
    requiresPRsToChangeCode,
    requiresUpToDateBranches,
    runsStatusChecksBeforeMerging,
    sastToolConfigured,
    sastToolRunsOnAllCommits,
    securityPolicyContainsLinks,
    securityPolicyContainsText,
    securityPolicyContainsVulnerabilityDisclosure,
    securityPolicyPresent,
    testsRunInCI,
    topLevelPermissions,
    unsafeblock,
    webhooksUseSecrets,
}

impl ProbeName {
    pub fn as_str(&self) -> &'static str {
        match self {
            ProbeName::archived => "archived",
            ProbeName::blocksDeleteOnBranches => "blocksDeleteOnBranches",
            ProbeName::blocksForcePushOnBranches => "blocksForcePushOnBranches",
            ProbeName::branchProtectionAppliesToAdmins => "branchProtectionAppliesToAdmins",
            ProbeName::branchesAreProtected => "branchesAreProtected",
            ProbeName::codeApproved => "codeApproved",
            ProbeName::codeReviewOneReviewers => "codeReviewOneReviewers",
            ProbeName::contributorsFromOrgOrCompany => "contributorsFromOrgOrCompany",
            ProbeName::createdRecently => "createdRecently",
            ProbeName::dependencyUpdateToolConfigured => "dependencyUpdateToolConfigured",
            ProbeName::dismissesStaleReviews => "dismissesStaleReviews",
            ProbeName::fuzzed => "fuzzed",
            ProbeName::hasBinaryArtifacts => "hasBinaryArtifacts",
            ProbeName::hasDangerousWorkflowScriptInjection => "hasDangerousWorkflowScriptInjection",
            ProbeName::hasDangerousWorkflowUntrustedCheckout => {
                "hasDangerousWorkflowUntrustedCheckout"
            }
            ProbeName::hasFSFOrOSIApprovedLicense => "hasFSFOrOSIApprovedLicense",
            ProbeName::hasLicenseFile => "hasLicenseFile",
            ProbeName::hasNoGitHubWorkflowPermissionUnknown => {
                "hasNoGitHubWorkflowPermissionUnknown"
            }
            ProbeName::hasOSVVulnerabilities => "hasOSVVulnerabilities",
            ProbeName::hasOpenSSFBadge => "hasOpenSSFBadge",
            ProbeName::hasPermissiveLicense => "hasPermissiveLicense",
            ProbeName::hasRecentCommits => "hasRecentCommits",
            ProbeName::hasReleaseSBOM => "hasReleaseSBOM",
            ProbeName::hasSBOM => "hasSBOM",
            ProbeName::hasUnverifiedBinaryArtifacts => "hasUnverifiedBinaryArtifacts",
            ProbeName::issueActivityByProjectMember => "issueActivityByProjectMember",
            ProbeName::jobLevelPermissions => "jobLevelPermissions",
            ProbeName::packagedWithAutomatedWorkflow => "packagedWithAutomatedWorkflow",
            ProbeName::pinsDependencies => "pinsDependencies",
            ProbeName::releasesAreSigned => "releasesAreSigned",
            ProbeName::releasesHaveProvenance => "releasesHaveProvenance",
            ProbeName::releasesHaveVerifiedProvenance => "releasesHaveVerifiedProvenance",
            ProbeName::requiresApproversForPullRequests => "requiresApproversForPullRequests",
            ProbeName::requiresCodeOwnersReview => "requiresCodeOwnersReview",
            ProbeName::requiresLastPushApproval => "requiresLastPushApproval",
            ProbeName::requiresPRsToChangeCode => "requiresPRsToChangeCode",
            ProbeName::requiresUpToDateBranches => "requiresUpToDateBranches",
            ProbeName::runsStatusChecksBeforeMerging => "runsStatusChecksBeforeMerging",
            ProbeName::sastToolConfigured => "sastToolConfigured",
            ProbeName::sastToolRunsOnAllCommits => "sastToolRunsOnAllCommits",
            ProbeName::securityPolicyContainsLinks => "securityPolicyContainsLinks",
            ProbeName::securityPolicyContainsText => "securityPolicyContainsText",
            ProbeName::securityPolicyContainsVulnerabilityDisclosure => {
                "securityPolicyContainsVulnerabilityDisclosure"
            }
            ProbeName::securityPolicyPresent => "securityPolicyPresent",
            ProbeName::testsRunInCI => "testsRunInCI",
            ProbeName::topLevelPermissions => "topLevelPermissions",
            ProbeName::unsafeblock => "unsafeblock",
            ProbeName::webhooksUseSecrets => "webhooksUseSecrets",
        }
    }
}

impl Display for ProbeName {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn display_is_as_expected() {
        assert_eq!(ProbeName::archived.to_string(), "archived");
    }
}
